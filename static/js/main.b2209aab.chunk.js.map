{"version":3,"sources":["images/trivia.png","services/localStorage.jsx","services/api.jsx","redux/actions/index.js","redux/reducers/player.jsx","redux/reducers/game.jsx","redux/reducers/index.jsx","redux/store/index.jsx","pages/Login.jsx","pages/Settings.jsx","components/Header.jsx","components/NextButton.jsx","components/Question.jsx","components/Timer.jsx","pages/Game.jsx","pages/Ranking.jsx","pages/Feedback.jsx","App/index.jsx","index.jsx"],"names":["module","exports","localStorageInit","localStorage","getItem","save","JSON","stringify","setItem","loadTokenFromStorage","token","parse","saveTokenToStorage","fetchTokenFromApiAndSave","a","async","fetch","res","json","jsonRes","fetchQuestions","sets","expiredCode","cat","selectedCategory","dif","selectedDifficulty","typ","selectedType","endPoint","response_code","questions","results","forEach","question","window","atob","category","type","difficulty","correct_answer","incorrect_answers","length","fetchGravatar","email","hash","md5","toString","gravatar","url","saveAvatar","avatar","saveToken","initialState","name","assertions","score","gravatarEmail","gravatarUrl","player","state","action","user","points","time","stopTime","amount","categories","game","settings","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","Login","props","btnDisable","onChangeHandler","bind","onClickHandler","tokenFetch","this","target","setState","value","add","history","playerState","avatarFetch","resetTimeAction","resetAssertionsAction","push","className","src","img","alt","htmlFor","data-testid","id","placeholder","onChange","disabled","onClick","React","Component","connect","dispatch","addUser","console","log","fetchAvatar","Settings","categoriesFetch","settingsSave","map","key","request","response","trivia_categories","saveSettings","Header","userName","NextButton","nextQuestion","funct","resetStyles","Question","answers","correctBtnClass","incorrectBtnClass","answered","shuffleAnswers","checkAnswer","resetButtonStyles","savePlayerToStorage","savePoints","prevProps","isToStopTime","sort","Math","random","addPoints","stopTheTimer","timer","corretAnswer","indexOf","answer","isCorrect","increaseScore","intervals","Timer","updateTheTime","interval","setInterval","currentTime","descrease","stop","clearInterval","timerClassName","Game","isLoading","questionIndex","nextQ","getQuestions","then","ranking","arr","b","resetTimer","prevState","to","Ranking","element","index","Feedback","App","exact","path","render","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.b2209aab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","export const localStorageInit = () => {\n  const ranking = localStorage.getItem('ranking');\n  if (!ranking) {\n    const emtpyArr = [];\n    const save = JSON.stringify(emtpyArr);\n    localStorage.setItem('ranking', save);\n  }\n};\n\nexport const loadTokenFromStorage = () => {\n  const token = JSON.parse(localStorage.getItem('token'));\n  if (!token) { return 'no token in storage'; }\n  return token;\n};\n\nexport const loadRankingFromStorage = () => {\n  const ranking = JSON.parse(localStorage.getItem('ranking'));\n  return ranking;\n};\n\nexport const saveTokenToStorage = (token) => {\n  const save = JSON.stringify(token);\n  localStorage.setItem('token', save);\n};\n","import md5 from 'crypto-js/md5';\nimport { loadTokenFromStorage, saveTokenToStorage } from './localStorage';\n\nconst END_POINT = 'https://opentdb.com/api.php?encode=base64&amount=5&token=';\nconst TOKEN_END_POINT = 'https://opentdb.com/api_token.php?command=request';\n\nexport const fetchTokenFromApiAndSave = async () => {\n  const res = await fetch(TOKEN_END_POINT);\n  const jsonRes = await res.json();\n  const { token } = jsonRes;\n  saveTokenToStorage(token);\n  return token;\n};\n\nconst fetchQuestions = async (token, sets) => {\n  const expiredCode = 3;\n  const { selectedCategory: cat, selectedDifficulty: dif, selectedType: typ } = sets;\n  const endPoint = `${END_POINT}${token}&category=${cat}&difficulty=${dif}&type=${typ}`;\n  const res = await fetch(endPoint);\n  const jsonRes = await res.json();\n  if (jsonRes.response_code === expiredCode) { return 'token expired'; }\n  const questions = jsonRes.results;\n  questions.forEach((question) => {\n    question.question = window.atob(question.question);\n    question.category = window.atob(question.category);\n    question.type = window.atob(question.type);\n    question.difficulty = window.atob(question.difficulty);\n    question.correct_answer = window.atob(question.correct_answer);\n    question.incorrect_answers[0] = window.atob(question.incorrect_answers[0]);\n    if (question.incorrect_answers.length > 1) {\n      question.incorrect_answers[1] = window.atob(question.incorrect_answers[1]);\n      question.incorrect_answers[2] = window.atob(question.incorrect_answers[2]);\n    }\n  });\n  return questions;\n};\n\nexport const getQuestions = async (settings) => {\n  let token = loadTokenFromStorage();\n  if (token === 'no token in storage') { token = await fetchTokenFromApiAndSave(); }\n  let questions = await fetchQuestions(token, settings);\n  if (questions === 'token expired') {\n    token = await fetchTokenFromApiAndSave();\n    questions = await await fetchQuestions(token);\n  }\n  return questions;\n};\n\nexport const fetchGravatar = async (email) => {\n  const hash = md5(email).toString();\n  const gravatar = await fetch(`https://www.gravatar.com/avatar/${hash}`);\n  return gravatar.url;\n};\n","import { fetchGravatar, fetchTokenFromApiAndSave } from '../../services/api';\n\nexport const ADD_USER = 'ADD_USER';\nexport const DECREASE_TIME = 'DECREASE_TIME';\nexport const INCREASE_SCORE = 'INCREASE_SCORE';\nexport const STOP_TIME = 'STOP_TIME';\nexport const RESET_TIME = 'RESET_TIME';\nexport const SAVE_AVATAR = 'SAVE_AVATAR';\nexport const INCREASE_ASSERTIONS = 'INCREASE_ASSERTIONS';\nexport const RESET_ASSERTIONS = 'RESET_ASSERTIONS';\nexport const SAVE_CATEGORIES = 'SAVE_CATEGORIES';\nexport const SAVE_SETTINGS = 'SAVE_SETTINGS';\nexport const SAVE_TOKEN = 'SAVE_TOKEN';\nexport const SAVE_QUESTIONS = 'SAVE_QUESTIONS';\n\nconst CATEGORIES_URL = 'https://opentdb.com/api_category.php';\n\nexport const addUser = (user) => (\n  {\n    type: ADD_USER,\n    user,\n  }\n);\n\nexport const decreaseTime = () => (\n  {\n    type: DECREASE_TIME,\n  }\n);\n\nexport const stopTime = () => (\n  {\n    type: STOP_TIME,\n  }\n);\n\nexport const resetTime = () => (\n  {\n    type: RESET_TIME,\n  }\n);\n\nexport const increaseScore = (points) => (\n  {\n    type: INCREASE_SCORE,\n    points,\n  }\n);\n\nexport const saveAvatar = (avatar) => (\n  {\n    type: SAVE_AVATAR,\n    avatar,\n  }\n);\n\nexport const correctAnswers = () => (\n  {\n    type: INCREASE_ASSERTIONS,\n  }\n);\n\nexport const resetAssertions = () => (\n  {\n    type: RESET_ASSERTIONS,\n  }\n);\n\nexport const fetchAvatar = (email) => async (dispatch) => {\n  try {\n    const avatar = await fetchGravatar(email);\n    dispatch(saveAvatar(avatar));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst actionCategories = (categories) => (\n  {\n    type: SAVE_CATEGORIES,\n    categories,\n  }\n);\n\nexport const fetchCategories = () => async (dispatch) => {\n  try {\n    const request = await fetch(CATEGORIES_URL);\n    const response = await request.json();\n    dispatch(actionCategories(response.trivia_categories));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst actionDifficulty = (categories) => (\n  {\n    type: SAVE_CATEGORIES,\n    categories,\n  }\n);\n\nexport const fetchDifficulty = () => async (dispatch) => {\n  try {\n    const request = await fetch(CATEGORIES_URL);\n    const response = await request.json();\n    dispatch(actionDifficulty(response.trivia_categories));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const saveSettings = (settings) => (\n  {\n    type: SAVE_SETTINGS,\n    settings,\n  }\n);\n\nexport const saveToken = (token) => (\n  {\n    type: SAVE_TOKEN,\n    token,\n  }\n);\n\nexport const fetchToken = () => async (dispatch) => {\n  try {\n    const token = await fetchTokenFromApiAndSave();\n    dispatch(saveToken(token));\n  } catch (e) {\n    console.log(e);\n  }\n};\n","import {\n  ADD_USER,\n  INCREASE_SCORE,\n  SAVE_AVATAR,\n  INCREASE_ASSERTIONS,\n  RESET_ASSERTIONS,\n} from '../actions';\n\nconst initialState = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  gravatarUrl: '',\n};\n\nconst player = (state = initialState, action) => {\n  switch (action.type) {\n  case ADD_USER:\n    return { ...state, name: action.user.name, gravatarEmail: action.user.email };\n  case INCREASE_SCORE:\n    return { ...state, score: state.score + action.points };\n  case INCREASE_ASSERTIONS:\n    return { ...state, assertions: state.assertions + 1 };\n  case SAVE_AVATAR:\n    return { ...state, gravatarUrl: action.avatar };\n  case RESET_ASSERTIONS:\n    return { ...state, assertions: 0, score: 0 };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import {\n  DECREASE_TIME,\n  STOP_TIME,\n  RESET_TIME,\n  SAVE_CATEGORIES,\n  SAVE_SETTINGS,\n  SAVE_TOKEN,\n} from '../actions';\n\nconst initialState = {\n  time: 30,\n  stopTime: false,\n  score: 0,\n  amount: 5,\n  token: '',\n  categories: [],\n  questions: [],\n  selectedCategory: '',\n  selectedDifficulty: '',\n  selectedType: '',\n};\n\nconst game = (state = initialState, action) => {\n  switch (action.type) {\n  case DECREASE_TIME:\n    return { ...state, time: state.time - 1 };\n  case STOP_TIME:\n    return { ...state, stopTime: true };\n  case RESET_TIME:\n    return { ...state, time: 30, stopTime: false };\n  case SAVE_CATEGORIES:\n    return { ...state, categories: action.categories };\n  case SAVE_SETTINGS:\n    return { ...state, ...action.settings };\n  case SAVE_TOKEN:\n    return { ...state, token: action.token };\n  default:\n    return state;\n  }\n};\n\nexport default game;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport player from './player';\nimport game from './game';\n\nconst rootReducer = combineReducers({ user, game, player });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport { func, shape, number, string } from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  addUser,\n  fetchAvatar,\n  resetTime,\n  resetAssertions,\n  fetchToken,\n} from '../redux/actions';\nimport './Login.css';\nimport img from '../images/trivia.png';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      name: '',\n      btnDisable: true,\n    };\n    this.onChangeHandler = this.onChangeHandler.bind(this);\n    this.onClickHandler = this.onClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    const { tokenFetch } = this.props;\n    tokenFetch();\n  }\n\n  onChangeHandler({ target }) {\n    this.setState({ [target.name]: target.value }, () => {\n      const { email, name } = this.state;\n      if (email.length && name.length) {\n        this.setState({ btnDisable: false });\n      } else {\n        this.setState({ btnDisable: true });\n      }\n    });\n  }\n\n  async onClickHandler() {\n    const {\n      add,\n      history,\n      playerState,\n      avatarFetch,\n      resetTimeAction,\n      resetAssertionsAction,\n    } = this.props;\n\n    const { email, name } = this.state;\n    await add({ email, name });\n    await avatarFetch(email);\n    localStorage.setItem('state', JSON.stringify({ player: playerState }));\n    history.push('/game');\n    resetTimeAction();\n    resetAssertionsAction();\n  }\n\n  render() {\n    const { email, name, btnDisable } = this.state;\n    const { history } = this.props;\n\n    return (\n      <div className=\"login\">\n        <div><img src={ img } alt=\"\" /></div>\n        <form>\n          <label htmlFor=\"email-input\">\n            <input\n              type=\"email\"\n              data-testid=\"input-gravatar-email\"\n              id=\"email-input\"\n              name=\"email\"\n              placeholder=\"Email\"\n              value={ email }\n              onChange={ this.onChangeHandler }\n            />\n          </label>\n          <label htmlFor=\"name-input\">\n            <input\n              type=\"name\"\n              data-testid=\"input-player-name\"\n              id=\"name-input\"\n              name=\"name\"\n              placeholder=\"Apelido\"\n              value={ name }\n              onChange={ this.onChangeHandler }\n            />\n          </label>\n          <input\n            className=\"jogar-btn\"\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={ btnDisable }\n            value=\"Jogar\"\n            onClick={ this.onClickHandler }\n          />\n        </form>\n        <input\n          data-testid=\"btn-settings\"\n          type=\"button\"\n          value=\"Settings\"\n          onClick={ () => history.push('/settings') }\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  add: (user) => dispatch(addUser(user)),\n  avatarFetch: (email) => dispatch(fetchAvatar(email)),\n  tokenFetch: () => dispatch(fetchToken()),\n  resetTimeAction: () => dispatch(resetTime()),\n  resetAssertionsAction: () => dispatch(resetAssertions()),\n});\n\nconst mapStateToProps = (state) => ({\n  playerState: state.player,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  add: func.isRequired,\n  avatarFetch: func.isRequired,\n  tokenFetch: func.isRequired,\n  resetTimeAction: func.isRequired,\n  resetAssertionsAction: func.isRequired,\n  history: shape({\n    length: number,\n    action: string,\n    push: func,\n  }).isRequired,\n  playerState: shape({\n    name: string,\n    assertions: number,\n    score: number,\n    gravatarEmail: string,\n  }).isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { func, shape, number, string, arrayOf } from 'prop-types';\nimport { fetchCategories, saveSettings } from '../redux/actions';\nimport './Settings.css';\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCategory: '',\n      selectedDifficulty: '',\n      selectedType: '',\n    };\n    this.onChangeHandler = this.onChangeHandler.bind(this);\n    this.onClickHandler = this.onClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    const { categoriesFetch } = this.props;\n    categoriesFetch();\n  }\n\n  onChangeHandler({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  onClickHandler() {\n    const { settingsSave, history } = this.props;\n    settingsSave(this.state);\n    history.push('/');\n  }\n\n  render() {\n    const { selectedCategory, selectedDifficulty, selectedType } = this.state;\n    const { categories } = this.props;\n    return (\n      <div className=\"settings\">\n        <h1 data-testid=\"settings-title\">Settings</h1>\n        <form action=\"\">\n          <label htmlFor=\"selectedCategory-select\">\n            Category\n            <select\n              name=\"selectedCategory\"\n              id=\"selectedCategory-select\"\n              value={ selectedCategory }\n              onChange={ this.onChangeHandler }\n            >\n              {categories.map(({ id, name }) => (\n                <option key={ id } value={ id }>{name}</option>\n              ))}\n            </select>\n          </label>\n          <label htmlFor=\"selectedDifficulty-select\">\n            Difficulty\n            <select\n              name=\"selectedDifficulty\"\n              id=\"selectedDifficulty-select\"\n              value={ selectedDifficulty }\n              onChange={ this.onChangeHandler }\n            >\n              <option value=\"easy\">Easy</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"hard\">Hard</option>\n            </select>\n          </label>\n          <label htmlFor=\"selectedType-select\">\n            Type\n            <select\n              name=\"selectedType\"\n              id=\"selectedType-select\"\n              value={ selectedType }\n              onChange={ this.onChangeHandler }\n            >\n              <option value=\"multiple\">Multiple</option>\n              <option value=\"boolean\">Boolean</option>\n            </select>\n          </label>\n          <input type=\"button\" value=\"Save\" onClick={ this.onClickHandler } />\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  categoriesFetch: () => dispatch(fetchCategories()),\n  settingsSave: (settings) => dispatch(saveSettings(settings)),\n});\n\nconst mapStateToProps = (state) => ({\n  categories: state.game.categories,\n});\n\nSettings.propTypes = {\n  categoriesFetch: func.isRequired,\n  settingsSave: func.isRequired,\n  categories: arrayOf(shape({\n    id: number,\n    name: string,\n  })).isRequired,\n  history: shape({\n    length: number,\n    action: string,\n    push: func,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Header.css';\n\nclass Header extends React.Component {\n  render() {\n    const { userName, score, gravatarUrl } = this.props;\n\n    return (\n      <header>\n        <div className=\"userInfo\">\n          <img\n            data-testid=\"header-profile-picture\"\n            className=\"avatar\"\n            src={ gravatarUrl }\n            alt=\"Icone do Avatar\"\n          />\n          <h2 data-testid=\"header-player-name\" className=\"userName\">\n            {`Jogador: ${userName}`}\n          </h2>\n        </div>\n        <div className=\"scoreBoard\">\n          <h4 data-testid=\"header-score\" className=\"score\">\n            {score}\n          </h4>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => (\n  {\n    userName: state.player.name,\n    score: state.player.score,\n    gravatarUrl: state.player.gravatarUrl,\n  }\n);\n\nexport default connect(mapStateToProps)(Header);\n\nHeader.propTypes = {\n  userName: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  gravatarUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { func } from 'prop-types';\nimport './NextButton.css';\n\nclass NextButton extends React.Component {\n  constructor() {\n    super();\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  nextQuestion() {\n    const { funct, resetStyles } = this.props;\n    funct();\n    resetStyles();\n  }\n\n  render() {\n    return (\n      <input\n        className=\"next-button\"\n        type=\"button\"\n        value=\"Próxima\"\n        data-testid=\"btn-next\"\n        onClick={ this.nextQuestion }\n      />\n    );\n  }\n}\n\nNextButton.propTypes = {\n  funct: func.isRequired,\n  resetStyles: func.isRequired,\n};\n\nexport default NextButton;\n","import React from 'react';\nimport { shape, string, arrayOf, number, func, bool } from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Question.css';\nimport NextButton from './NextButton';\nimport { localStorageInit } from '../services/localStorage';\nimport { stopTime, increaseScore, correctAnswers } from '../redux/actions';\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answers: [],\n      correctBtnClass: '',\n      incorrectBtnClass: '',\n      answered: false,\n    };\n    this.shuffleAnswers = this.shuffleAnswers.bind(this);\n    this.checkAnswer = this.checkAnswer.bind(this);\n    this.resetButtonStyles = this.resetButtonStyles.bind(this);\n    this.savePlayerToStorage = this.savePlayerToStorage.bind(this);\n    this.savePoints = this.savePoints.bind(this);\n  }\n\n  componentDidMount() {\n    const { playerState } = this.props;\n    this.shuffleAnswers();\n    localStorage.setItem('state', JSON.stringify({ player: playerState }));\n  }\n\n  componentDidUpdate(prevProps) {\n    const { question, isToStopTime } = this.props;\n    const { answered } = this.state;\n    if (prevProps.question.correct_answer !== question.correct_answer) {\n      this.shuffleAnswers();\n    }\n    if (isToStopTime && !answered) {\n      this.checkAnswer({ target: { value: 'errado' } });\n    }\n  }\n\n  resetButtonStyles() {\n    this.setState({\n      correctBtnClass: '',\n      incorrectBtnClass: '',\n    });\n  }\n\n  shuffleAnswers() {\n    const { question } = this.props;\n    const answers = [...question.incorrect_answers, question.correct_answer];\n    const half = 0.5;\n    answers.sort(() => Math.random() - half);\n    this.setState({ answers, answered: false });\n  }\n\n  async savePoints(points) {\n    const { addPoints } = this.props;\n    await addPoints(points);\n    this.savePlayerToStorage();\n  }\n\n  savePlayerToStorage() {\n    const { playerState } = this.props;\n    localStorage.setItem('state', JSON.stringify({ player: playerState }));\n  }\n\n  checkAnswer({ target }) {\n    const { question, stopTheTimer, timer, corretAnswer } = this.props;\n    const { difficulty } = question;\n    const levels = ['easy', 'medium', 'hard'];\n    const ten = 10;\n    stopTheTimer();\n\n    if (target.value === question.correct_answer) {\n      const points = ten + (timer * (levels.indexOf(difficulty) + 1));\n      this.savePoints(points);\n      corretAnswer();\n    }\n\n    this.setState({\n      correctBtnClass: 'correct-btn',\n      incorrectBtnClass: 'incorrect-btn',\n      answered: true });\n  }\n\n  render() {\n    localStorageInit();\n    const { question, isToStopTime, funct } = this.props;\n    const { answers, correctBtnClass, incorrectBtnClass, answered } = this.state;\n\n    return (\n      <div className=\"question\">\n        <h3 data-testid=\"question-category\">{question.category}</h3>\n        <p data-testid=\"question-text\">{question.question}</p>\n        {answers.map((answer) => {\n          const isCorrect = answer === question.correct_answer;\n          return (\n            <input\n              key={ answer }\n              data-testid={\n                isCorrect\n                  ? 'correct-answer'\n                  : `wrong-answer-${question.incorrect_answers.indexOf(answer)}`\n              }\n              type=\"button\"\n              value={ answer }\n              className={ `answer ${isCorrect ? correctBtnClass : incorrectBtnClass}` }\n              onClick={ this.checkAnswer }\n              disabled={ isToStopTime }\n            />\n          );\n        })}\n        {\n          answered\n            ? <NextButton resetStyles={ this.resetButtonStyles } funct={ funct } />\n            : null\n        }\n      </div>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  question: shape({\n    category: string,\n    type: string,\n    difficulty: string,\n    question: string,\n    correct_answer: string,\n    incorrect_answers: arrayOf(string),\n  }).isRequired,\n  stopTheTimer: func.isRequired,\n  isToStopTime: bool.isRequired,\n  funct: func.isRequired,\n  timer: number.isRequired,\n  addPoints: func.isRequired,\n  corretAnswer: func.isRequired,\n  playerState: shape({\n    name: string,\n    assertions: number,\n    score: number,\n    gravatarEmail: string,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => (\n  {\n    stopTheTimer: () => dispatch(stopTime()),\n    addPoints: (points) => dispatch(increaseScore(points)),\n    corretAnswer: () => dispatch(correctAnswers()),\n  }\n);\n\nconst mapStateToProps = (state) => (\n  {\n    isToStopTime: state.game.stopTime,\n    timer: state.game.time,\n    playerState: state.player,\n  }\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Timer.css';\nimport { decreaseTime, stopTime } from '../redux/actions';\n\nconst ONE_SECOND = 1000;\nconst intervals = [];\n\nclass Timer extends React.Component {\n  constructor() {\n    super();\n    this.updateTheTime = this.updateTheTime.bind(this);\n  }\n\n  componentDidMount() {\n    const interval = setInterval(this.updateTheTime, ONE_SECOND);\n    intervals.push(interval);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { isToStopTime } = this.props;\n    if (prevProps.isToStopTime !== isToStopTime) {\n      const interval = setInterval(this.updateTheTime, ONE_SECOND);\n      intervals.push(interval);\n    }\n  }\n\n  updateTheTime() {\n    const { currentTime, isToStopTime, descrease, stop } = this.props;\n    if (currentTime === 0 || isToStopTime) {\n      stop();\n      intervals.forEach(clearInterval);\n    } else {\n      descrease();\n    }\n  }\n\n  timerClassName(currentTime) {\n    const ten = 10;\n    if (currentTime > ten) {\n      const className = currentTime % 2 === 0 ? 'timer timer-even' : 'timer timer-odd';\n      return className;\n    }\n    const className = currentTime % 2 === 0\n      ? 'timer timer-ten-sec-even'\n      : 'timer timer-ten-sec-odd';\n    return className;\n  }\n\n  render() {\n    const { currentTime } = this.props;\n\n    return (\n      <div className={ this.timerClassName(currentTime) }>\n        {`Tempo Restante: ${currentTime}`}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => (\n  {\n    descrease: () => dispatch(decreaseTime()),\n    stop: () => dispatch(stopTime()),\n  }\n);\n\nconst mapStateToProps = (state) => (\n  {\n    currentTime: state.game.time,\n    isToStopTime: state.game.stopTime,\n  }\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n\nTimer.propTypes = {\n  currentTime: PropTypes.number.isRequired,\n  isToStopTime: PropTypes.bool.isRequired,\n  descrease: PropTypes.func.isRequired,\n  stop: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { func, shape, string } from 'prop-types';\nimport { getQuestions } from '../services/api';\nimport { localStorageInit } from '../services/localStorage';\nimport { Header, Question, Timer } from '../components';\nimport { resetTime } from '../redux/actions';\n\nconst FIVE = 5;\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: null,\n      isLoading: true,\n      questionIndex: 0,\n    };\n    this.nextQ = this.nextQ.bind(this);\n  }\n\n  componentDidMount() {\n    const { settings } = this.props;\n    getQuestions(settings)\n      .then((questions) => this.setState({\n        questions,\n        isLoading: false,\n      }));\n  }\n\n  componentWillUnmount() {\n    localStorageInit();\n    const state = JSON.parse(localStorage.getItem('state'));\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    const arr = [...ranking, state];\n    arr.sort((a, b) => b.player.score - a.player.score);\n    const save = JSON.stringify(arr);\n    localStorage.setItem('ranking', save);\n  }\n\n  nextQ() {\n    const { resetTimer } = this.props;\n    this.setState((prevState) => ({\n      questionIndex: prevState.questionIndex + 1,\n    }));\n    resetTimer();\n  }\n\n  render() {\n    const { isLoading, questions, questionIndex } = this.state;\n\n    if (questionIndex === FIVE) {\n      return <Redirect to=\"/feedback\" />;\n    }\n\n    return (\n      <div>\n        <Header />\n        <Timer />\n        {\n          isLoading\n            ? <p>Loading...</p>\n            : <Question funct={ this.nextQ } question={ questions[questionIndex] } />\n        }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => (\n  {\n    question: state.game.questions,\n    settings: {\n      selectedCategory: state.game.selectedCategory,\n      selectedDifficulty: state.game.selectedDifficulty,\n      selectedType: state.game.selectedType,\n    },\n  }\n);\n\nconst mapDispatchToProps = (dispatch) => (\n  {\n    resetTimer: () => dispatch(resetTime()),\n  }\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n\nGame.propTypes = {\n  resetTimer: func.isRequired,\n  settings: shape({\n    selectedCategory: string,\n    selectedDifficulty: string,\n    selectedType: string,\n  }).isRequired,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { loadRankingFromStorage } from '../services/localStorage';\nimport './Ranking.css';\n\nclass Ranking extends React.Component {\n  render() {\n    const ranking = loadRankingFromStorage();\n    return (\n      <div className=\"ranking\">\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        <ol>\n          {\n            ranking.map((element, index) => (\n              <li key={ index }>\n                <p>{`${index + 1}.`}</p>\n                <p\n                  className=\"ranking-mid\"\n                  data-testid={ `player-name-${index}` }\n                >\n                  {element.player.name}\n                </p>\n                <p data-testid={ `player-score-${index}` }>{element.player.score}</p>\n                <img src={ element.player.gravatarUrl } alt=\"Avatar\" />\n              </li>\n            ))\n          }\n        </ol>\n        <Link to=\"/\" data-testid=\"btn-go-home\">\n          <button type=\"button\">Tela inicial</button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import React from 'react';\nimport { shape, number } from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport './Feedback.css';\n\nclass Feedback extends React.Component {\n  render() {\n    const { player: { assertions, score } } = this.props;\n    const threshold = 3;\n    return (\n      <>\n        <Header />\n        <section className=\"feedback\">\n          <h1 data-testid=\"feedback-text\">\n            { assertions >= threshold ? 'Mandou bem!' : 'Podia ser melhor...' }\n          </h1>\n          <p>\n            Você acertou\n            <span data-testid=\"feedback-total-question\">\n              {' '}\n              { assertions }\n              {' '}\n            </span>\n            { assertions === 1 ? 'questão' : 'questões' }\n          </p>\n          <p>\n            Um total de\n            <span data-testid=\"feedback-total-score\">\n              {' '}\n              {score}\n              {' '}\n            </span>\n            pontos.\n          </p>\n          <div>\n            <Link to=\"/ranking\">\n              <button type=\"button\" data-testid=\"btn-ranking\">\n                Ver Ranking\n              </button>\n            </Link>\n            <Link to=\"/\">\n              <button type=\"button\" data-testid=\"btn-play-again\">\n                Jogar Novamente\n              </button>\n            </Link>\n          </div>\n        </section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n});\n\nexport default connect(mapStateToProps, null)(Feedback);\n\nFeedback.propTypes = {\n  player: shape({\n    assertions: number,\n    score: number,\n  }).isRequired,\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport {\n  Login,\n  Game,\n  Settings,\n  Ranking,\n  Feedback,\n} from '../pages';\nimport { localStorageInit } from '../services/localStorage';\nimport './App.css';\n\nexport default class App extends React.Component {\n  render() {\n    localStorageInit();\n    return (\n      <Switch>\n        <Route\n          exact\n          path=\"/settings\"\n          render={ (props) => <Settings { ...props } /> }\n        />\n        <Route\n          exact\n          path=\"/\"\n          render={ (props) => <Login { ...props } /> }\n        />\n        <Route\n          exact\n          path=\"/game\"\n          render={ (props) => <Game { ...props } /> }\n        />\n        <Route\n          exact\n          path=\"/ranking\"\n          render={ (props) => <Ranking { ...props } /> }\n        />\n        <Route\n          exact\n          path=\"/feedback\"\n          render={ (props) => <Feedback { ...props } /> }\n        />\n        {/* <Route render={ (props) => <NotFound { ...props } /> } /> */}\n      </Switch>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'; // REDUX\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './redux/store'; // REDUX\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <BrowserRouter basename={ process.env.PUBLIC_URL }>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}